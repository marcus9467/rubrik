<#

.SYNOPSIS
This script will onboard new MSSQL hosts based on a provided CSV file and then later assign protection to MSSQL Databases. 

.EXAMPLE
./OnboardOneDrive.ps1 -ServiceAccountJson $serviceaccountJson -CSV ./OneDriveUsers.csv -PrepareAssignment -SlaId "68ea85e2-b265-4340-9adf-53af47cabebf" -orgId "ef30a5d6-9825-4c2b-b45d-91d68c0ae4e1"

This will take a list of users and capture their IDs within RSC as well as map their current and future SLAs

.EXAMPLE
./OnboardOneDrive.ps1 -ServiceAccountJson $serviceaccountJson -GatherTenant -orgId "ef30a5d6-9825-4c2b-b45d-91d68c0ae4e1"  -SlaId "68ea85e2-b265-4340-9adf-53af47cabebf"

Forgoes the CSV process and generates a list of all users within a tenant and maps their IDs

.EXAMPLE
./AssignM365.ps1 -assignSLas -OrgId $orgId -ServiceAccountJson $serviceAccountJson -SlaId "bc0ae305-159b-47c8-8588-9a30f3868af2" -csv $CSV -batched

Assigns the future SLA using a CSV that was generated by the prior steps in batches of 50 users. 

.NOTES
    Author  : Marcus Henderson <marcus.henderson@rubrik.com> 
    Created : April 12, 2024
    Company : Rubrik Inc

#>

[cmdletbinding()]
param (
    [parameter(Mandatory=$true)]
    [string]$ServiceAccountJson,
    [parameter(Mandatory=$false)]
    [string]$SlaId,
    [parameter(Mandatory=$false)]
    [string]$CSV,
    [parameter(Mandatory=$false)]
    [string]$OrgId,
    [parameter(Mandatory=$false)]
    [switch]$PrepareAssignment,
    [parameter(Mandatory=$false)]
    [switch]$AssignSlas,
    [parameter(Mandatory=$false)]
    [switch]$GatherTenant,
    [parameter(Mandatory=$false)]
    [switch]$batched
)


function Connect-Polaris {

    # Function that uses the Polaris/RSC Service Account JSON and opens a new session, and returns the session temp token

    [CmdletBinding()]

    param (

        # Service account JSON file

    )

   

    begin {

        # Parse the JSON and build the connection string

        #$serviceAccountObj 

        $connectionData = [ordered]@{

            'client_id' = $serviceAccountObj.client_id

            'client_secret' = $serviceAccountObj.client_secret

        } | ConvertTo-Json

    }

   

    process {

        try{

            $polaris = Invoke-RestMethod -Method Post -uri $serviceAccountObj.access_token_uri -ContentType application/json -body $connectionData

        }

        catch [System.Management.Automation.ParameterBindingException]{

            Write-Error("The provided JSON has null or empty fields, try the command again with the correct file or redownload the service account JSON from Polaris")

        }

    }

   

    end {

            if($polaris.access_token){

                Write-Output $polaris

            } else {

                Write-Error("Unable to connect")

            }

           

        }

}
function Disconnect-Polaris {

    # Closes the session with the session token passed here

    [CmdletBinding()]

    param (
    )

   

    begin {

 

    }

   

    process {

        try{

            $closeStatus = $(Invoke-WebRequest -Method Delete -Headers $headers -ContentType "application/json; charset=utf-8" -Uri $logoutUrl).StatusCode

        }

        catch [System.Management.Automation.ParameterBindingException]{

            Write-Error("Failed to logout. Error $($_)")

        }

    }

   

    end {

            if({$closeStatus -eq 204}){

                Write-Output("Successfully logged out")

            } else {

                Write-Error("Error $($_)")

            }

        }

}
function get-m365OneDriveUser{
    [CmdletBinding()]
    param (
        [parameter(Mandatory=$true)]
        [string]$orgId,
        [parameter(Mandatory=$false)]
        [string]$emailAddress
    )
    try{
        $variables = "{
            `"orgId`": `"$orgId`",
            `"first`": 200,
            `"filter`": [
              {
                `"field`": `"EXCLUDED_SHAREPOINT_LIBRARY_TYPE`",
                `"texts`": [
                  `"WEB_PAGE_LIBRARY`"
                ]
              },
              {
                `"field`": `"NAME_OR_EMAIL_ADDRESS`",
                `"texts`": [
                    `"$emailAddress`"
                    ]
              },
              {
                `"field`": `"IS_RELIC`",
                `"texts`": [
                  `"false`"
                ]
              }
            ],
            `"sortBy`": `"NAME`",
            `"sortOrder`": `"ASC`"
          }"
        $query = "query O365OnedriveListQuery(`$first: Int!, `$after: String, `$orgId: UUID!, `$filter: [Filter!]!, `$sortBy: HierarchySortByField, `$sortOrder: SortOrder) {
            o365Onedrives(o365OrgId: `$orgId, after: `$after, first: `$first, filter: `$filter, sortBy: `$sortBy, sortOrder: `$sortOrder) {
              edges {
                cursor
                node {
                  id
                  name
                  ...OnedriveNameColumnFragment
                  ...OnedriveEmailColumnFragment
                  ...OnedrivePreferredDataLocationColumnFragment
                  ...EffectiveSlaColumnFragment
                  ...EffectiveSlaSourceObjectFragment
                  ...SlaAssignmentColumnFragment
                  authorizedOperations
                  __typename
                }
                __typename
              }
              pageInfo {
                endCursor
                hasNextPage
                hasPreviousPage
                __typename
              }
              __typename
            }
          }
          
          fragment OnedriveNameColumnFragment on O365Onedrive {
            userName
            __typename
          }
          
          fragment OnedriveEmailColumnFragment on O365Onedrive {
            userPrincipalName
            __typename
          }
          
          fragment OnedrivePreferredDataLocationColumnFragment on O365Onedrive {
            preferredDataLocation
            __typename
          }
          
          fragment EffectiveSlaColumnFragment on HierarchyObject {
            id
            effectiveSlaDomain {
              ...EffectiveSlaDomainFragment
              ... on GlobalSlaReply {
                description
                __typename
              }
              __typename
            }
            ... on CdmHierarchyObject {
              pendingSla {
                ...SLADomainFragment
                __typename
              }
              __typename
            }
            __typename
          }
          
          fragment EffectiveSlaDomainFragment on SlaDomain {
            id
            name
            ... on GlobalSlaReply {
              isRetentionLockedSla
              retentionLockMode
              __typename
            }
            ... on ClusterSlaDomain {
              fid
              cluster {
                id
                name
                __typename
              }
              isRetentionLockedSla
              retentionLockMode
              __typename
            }
            __typename
          }
          
          fragment SLADomainFragment on SlaDomain {
            id
            name
            ... on ClusterSlaDomain {
              fid
              cluster {
                id
                name
                __typename
              }
              __typename
            }
            __typename
          }
          
          fragment EffectiveSlaSourceObjectFragment on HierarchyObject {
            effectiveSlaSourceObject {
              fid
              name
              objectType
              __typename
            }
            __typename
          }
          
          fragment SlaAssignmentColumnFragment on HierarchyObject {
            slaAssignment
            __typename
          }"
        $JSON_BODY = @{
            "variables" = $variables
            "query" = $query
        }
      
        $m365Info = @()
        $JSON_BODY = $JSON_BODY | ConvertTo-Json
        $result = Invoke-WebRequest -Uri $POLARIS_URL -Method POST -Headers $headers -Body $JSON_BODY
        $m365Info += (((($result.content | convertFrom-Json).data).o365Onedrives).edges).node
        while ((((($result.content | convertFrom-Json).data).o365Onedrives).pageInfo).hasNextPage -eq $true){
            $endCursor = (((($result.content | convertFrom-Json).data).o365Onedrives).pageInfo).endCursor
            Write-Host ("Looking at End Cursor " + $endCursor)
            $variables = "{
                `"orgId`": `"$orgId`",
                `"first`": 200,
                `"filter`": [
                  {
                    `"field`": `"EXCLUDED_SHAREPOINT_LIBRARY_TYPE`",
                    `"texts`": [
                      `"WEB_PAGE_LIBRARY`"
                    ]
                  },
                  {
                    `"field`": `"NAME_OR_EMAIL_ADDRESS`",
                    `"texts`": [
                      `"$emailAddress`"
                    ]
                  },
                  {
                    `"field`": `"IS_RELIC`",
                    `"texts`": [
                      `"false`"
                    ]
                  }
                ],
                `"sortBy`": `"NAME`",
                `"sortOrder`": `"ASC`",
                `"after`": `"${endCursor}`"
              }"
              $JSON_BODY = @{
                "variables" = $variables
                "query" = $query
            }
            $JSON_BODY = $JSON_BODY | ConvertTo-Json
            $result = Invoke-WebRequest -Uri $POLARIS_URL -Method POST -Headers $headers -Body $JSON_BODY
            $m365Info += (((($result.content | convertFrom-Json).data).o365Onedrives).edges).node
        }

        
    }
    catch{
        Write-Error("Error $($_)")
    }
    finally{
        Write-Output $m365Info
    }
}
function Set-m365OneDriveSla{
    [CmdletBinding()]
    param (
        [parameter(Mandatory=$true)]
        [string]$orgId,
        [parameter(Mandatory=$false)]
        [string]$ObjectIds,
        [parameter(Mandatory=$false)]
        [string]$slaId
    )
    try{
        $variables = "{
            `"input`": {
              `"assignSlaRequests`": [
                {
                  `"slaDomainAssignType`": `"protectWithSlaId`",
                  `"objectIds`": ${objectIds},
                  `"shouldApplyToExistingSnapshots`": true,
                  `"shouldApplyToNonPolicySnapshots`": false,
                  `"slaOptionalId`": `"$slaId`",
                  `"existingSnapshotRetention`": null
                }
              ],
              `"parentObjectIdToConflictObjectIdsMap`": [],
              `"userNote`": `"`"
            }
          }"
        $query = "mutation BulkAssignSlasMutation(`$input: BulkAssignSlasInput!) {
            bulkAssignSlas(input: `$input) {
              slaAssignResults {
                success
                __typename
              }
              __typename
            }
          }"
        $JSON_BODY = @{
            "variables" = $variables
            "query" = $query
        }
      
        $m365Info = @()
        $JSON_BODY = $JSON_BODY | ConvertTo-Json
        $result = Invoke-WebRequest -Uri $POLARIS_URL -Method POST -Headers $headers -Body $JSON_BODY
        $m365Info += ((($result.content | convertFrom-Json).data).bulkAssignSlas).slaAssignResults
    }
    catch{
        Write-Error("Error $($_)")
    }
    finally{
        Write-Output $m365Info
    }
}


$serviceAccountObj = Get-Content $ServiceAccountJson | ConvertFrom-Json
$polSession = Connect-Polaris
$rubtok = $polSession.access_token
$headers = @{
    'Content-Type'  = 'application/json';
    'Accept'        = 'application/json';
    'Authorization' = $('Bearer ' + $rubtok);
}
$Polaris_URL = ($serviceAccountObj.access_token_uri).replace("client_token", "graphql")
$logoutUrl = ($serviceAccountObj.access_token_uri).replace("client_token", "session")

if($PrepareAssignment){
    $emailList = Import-Csv $CSV
    $Output_directory = (Get-Location).path
    $mdate = (Get-Date).tostring("yyyyMMddHHmm")

    $OneDriveList = @()

    foreach ($user in $emailList) {
        Write-Host ("Gathering information for user " + $user.emailAddress)
        $userInfo = get-m365OneDriveUser -orgId $OrgId -emailAddress $user.emailAddress
        $OneDriveInfo = New-Object PSobject
        $OneDriveInfo | Add-Member -NotePropertyName "id" -NotePropertyValue $userInfo.id
        $OneDriveInfo | Add-Member -NotePropertyName "emailAddress" -NotePropertyValue $userInfo.userPrincipalName
        $OneDriveInfo | Add-Member -NotePropertyName "currentEffectiveSlaDomainName" -NotePropertyValue ($userInfo.effectiveSlaDomain).name
        $OneDriveInfo | Add-Member -NotePropertyName "currentEffectiveSlaDomainId" -NotePropertyValue ($userInfo.effectiveSlaDomain).Id
        $OneDriveInfo | Add-Member -NotePropertyName "slaIdToAssign" -NotePropertyValue $slaId
        $OneDriveList += $OneDriveInfo
    }
    Write-Host ("Writing CSV file to "  + $Output_directory + "/OneDriveAssignmentList" + $mdate + ".csv")
    $OneDriveList | Export-Csv -NoTypeInformation ($Output_directory + "/OneDriveAssignmentList" +$mdate + ".csv")
    Write-Host "Disconnecting From Rubrik Security Cloud."
    disconnect-Polaris
}
if($GatherTenant){
    Write-Host ("Gathering Information about the whole OneDrive footprint in Tenant ID " + $OrgId)
    $Output_directory = (Get-Location).path
    $mdate = (Get-Date).tostring("yyyyMMddHHmm")
    $userInfo = get-m365OneDriveUser -orgId $OrgId
    $OneDriveList = @()
    ForEach($user in $userInfo){
        $OneDriveInfo = New-Object PSobject
        $OneDriveInfo | Add-Member -NotePropertyName "id" -NotePropertyValue $user.id
        $OneDriveInfo | Add-Member -NotePropertyName "emailAddress" -NotePropertyValue $user.userPrincipalName
        $OneDriveInfo | Add-Member -NotePropertyName "currentEffectiveSlaDomainName" -NotePropertyValue ($user.effectiveSlaDomain).name
        $OneDriveInfo | Add-Member -NotePropertyName "currentEffectiveSlaDomainId" -NotePropertyValue ($user.effectiveSlaDomain).Id
        $OneDriveInfo | Add-Member -NotePropertyName "slaIdToAssign" -NotePropertyValue $slaId
        $OneDriveList += $OneDriveInfo
    }
    Write-Host ("Writing CSV file to "  + $Output_directory + "/OneDriveTenantList" + $mdate + ".csv")
    $OneDriveList | Export-Csv -NoTypeInformation ($Output_directory + "/OneDriveTenantList" +$mdate + ".csv")

    disconnect-Polaris
}
if($AssignSlas){
    $AssignmentObjects = Import-Csv $CSV
     # Assuming $AssignmentObjects is already populated
     if($batched){
         # Group by SLAId
        $groupedObjects = $AssignmentObjects | Group-Object -Property slaIdToAssign
        Write-host "Grouping OneDrive objects into batches of 50 based on the supplied SLA domains"
        foreach ($group in $groupedObjects) {
        $slaId = $group.Name
        $allIds = $group.Group.Id

        # Split into batches of 50
        $batches = [System.Collections.Generic.List[object]]::new()
        foreach ($id in $allIds) {
         $batches.Add($id)
            if ($batches.Count -eq 50) {
                Write-Host ("Applying SLA to the following Objects " + $batches.ToArray())
                Write-Host "======================================================================================================================================================================================================"
                Write-Host "API Output:"
                #Wait-Debugger
                #$batches = $batches | ConvertTo-Json
                Set-m365OneDriveSla -ObjectIds ($batches|ConvertTo-Json) -slaId $slaId -orgId $OrgId
               # Wait-Debugger
                $batches.Clear()
            }
        }
        # Process remaining items if any
        if ($batches.Count -gt 0) {
            Write-Host ("Applying SLA to the following Objects " + $batches.ToArray())
            Write-Host "======================================================================================================================================================================================================"
            Write-Host "API Output:"
            #$batches = $batches | ConvertTo-Json
            Set-m365OneDriveSla -ObjectIds ($batches|ConvertTo-Json) -slaId $slaId -orgId $OrgId
        }
    }
    Write-Host ("Writing CSV file to "  + $Output_directory + "/AssignedSLAOneDrive-" + $mdate + ".csv")
    $AssignmentObjects | Export-Csv -NoTypeInformation ($Output_directory + "/AssignedSLAOneDrive-" +$mdate + ".csv")
    Write-Host "Disconnecting From Rubrik Security Cloud."
    Disconnect-Polaris
  }
    else{
      $AssignmentObjectsCount = ($AssignmentObjects | Measure-Object).count
      $AssignmentObjectsIndex = 1
      foreach($Object in $AssignmentObjects){
          $objectId = $object.id| ConvertTo-Json
          Write-Host "======================================================================================================================================================================================================"
          Write-Output ("Assigning SLA "+ $object.slaIdToAssign + " to Object " + $object.emailAddress + " with object Id " + $objectId)
          Write-Host "======================================================================================================================================================================================================"
          Write-Host "API Output:"
          Set-m365OneDriveSla -ObjectId $objectId -slaId $object.slaIdToAssign -orgId $OrgId
          Write-Host ("Assigned SLA to object " + $AssignmentObjectsIndex + " of " + $AssignmentObjectsCount)
          $AssignmentObjectsIndex++
      }
      Write-Host "======================================================================================================================================================================================================"
      Write-Host ("Writing CSV file to "  + $Output_directory + "/AssignedSLAOneDrive-" + $mdate + ".csv")
      $AssignmentObjects | Export-Csv -NoTypeInformation ($Output_directory + "/AssignedSLAOneDrive-" +$mdate + ".csv")
      Write-Host "Disconnecting From Rubrik Security Cloud."
      Disconnect-Polaris
    }
}
Disconnect-Polaris









